import re
from typing import List

from bs4 import BeautifulSoup

from .form_field import FormField
from .form_field_collection import FormFieldCollection


class Form:
    """
    :param html: A string containing HTML markup.

    :param name: Specific form to parse from the HTML, None will default to
        the first encountered form.
    """

    # form element types to skip when parsing
    __EXCLUDE_TYPES = ("reset", "search", )

    def __init__(self, html: str, name: str = None):

        self._attributes = {}
        self.__reset_attributes()

        self._fields = FormFieldCollection()

        self.__parse(html, name)

    @property
    def name(self) -> str:
        return self._attributes["name"]

    @property
    def action(self) -> str:
        return self._attributes["action"]

    @property
    def method(self) -> str:
        return self._attributes["method"]

    @property
    def enctype(self) -> str:
        return self._attributes["enctype"]

    @property
    def fields(self) -> FormFieldCollection:
        return self._fields

    def to_dict(self) -> dict:
        """
        Return a dictionary containing the attributes and fields of the parsed
        form.
        """

        result = {"fields": []}
        for name, value in self._attributes.items():
            result["@" + name] = value
        
        for field in self._fields:
            result["fields"].append(field.to_dict())

        return result

    @classmethod
    def from_dict(cls, obj: dict) -> 'HtmlForm':
        """
        Restore a HtmlForm object from a dictionary.

        :param obj: A dictionary generated by the to_dict() method of an
            HtmlForm object.
        """

        # create the object using an empty form.
        form = cls("<form></form>", None)

        for key, value in obj.items():

            key = key.strip().lower()

            if key.startswith("@"):
                form._attributes[key[1:]] = value

            elif key == "fields":
                form.fields.extend([FormField.from_dict(field) for field in value])

        return form

    def __parse(self, html: str, name: str = None):
        """
        Parse HTML markup for "form" element, optionally selecting "form"
        element by name.

        :param html: HTML markup

        :param name: Filter to select form by given name, else first form is
            returned.
        """

        bs4parser = BeautifulSoup(html, "html5lib")

        find_attrs = {}
        if name is not None:
            find_attrs["name"] = name

        form = bs4parser.find("form", attrs=find_attrs)

        if form is None:
            raise RuntimeError("no form found in markup")

        self.__reset_attributes()

        for name, value in form.attrs.items():
            self._attributes[name] = value

        element_attrs_filters = [{"form": False}]
        if form.attrs.get("id", None) is not None:
            element_attrs_filters.append({"form": form.attrs["id"]})

        for attr_filter in element_attrs_filters:

            for field in form.find_all(FormField.FIELD_ELEMENTS, attrs=attr_filter):

                default_type = "text"
                if field.name == "button":
                    default_type = "submit"

                field_type = field.attrs.get("type", default_type).strip().lower()

                if field_type in self.__EXCLUDE_TYPES:
                    continue

                self._fields.extend(FormField.from_bs4(field))

        return None

    def __reset_attributes(self) -> None:
        """
        Reset the _attributes collection to default values.
        """

        self._attributes = {
            "name": None,
            "action": None,
            "method": None,
            "enctype": None
        }
